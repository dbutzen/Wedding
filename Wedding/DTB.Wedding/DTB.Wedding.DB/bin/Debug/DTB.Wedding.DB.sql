/*
Deployment script for DTB.Wedding.DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DTB.Wedding.DB"
:setvar DefaultFilePrefix "DTB.Wedding.DB"
:setvar DefaultDataPath "C:\Users\Dan\AppData\Local\Microsoft\VisualStudio\SSDT\DTB.Wedding"
:setvar DefaultLogPath "C:\Users\Dan\AppData\Local\Microsoft\VisualStudio\SSDT\DTB.Wedding"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DROP TABLE IF EXISTS dbo.tblFamily
DROP TABLE IF EXISTS dbo.tblGuest
DROP TABLE IF EXISTS dbo.tblTable
DROP TABLE IF EXISTS dbo.tblUser
GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
BEGIN
INSERT INTO dbo.tblFamily
	(Id, Name, Code)
VALUES
	(NEWID(), 'Dan Parents', 'AngryZebra'),
	(NEWID(), 'Dan Sister', 'GrowlingKoala'),
	(NEWID(), 'Dan Paternal Grandpa', 'HappyBadger'),
	(NEWID(), 'Dan Paternal Grandma', 'RadiantGoldfish'),
	(NEWID(), 'Dan Maternal Grandparents', 'WonderousSalmon'),
	(NEWID(), 'Dan Uncle Scott', 'TastyAnt'),
	(NEWID(), 'Dan Uncle Brian', 'HappyBear'),
	(NEWID(), 'Dan Aunt Jenny', 'UnhappyKing'),
	(NEWID(), 'Dan Uncle Dave', 'GratefulUndead'),
	(NEWID(), 'Dan Uncle Paul', 'BlackCat'),
	(NEWID(), 'Dan Aunt Karie', 'FastCar'),
	(NEWID(), 'Dan Uncle Al', 'RandomRelic'),
	(NEWID(), 'Dan Friend Ross', 'NarutoPikachu')
END
BEGIN
INSERT INTO [dbo].[tblTable]
	(Id, Name, NumberChairs)
VALUES
	(NEWID(), 'Float', 500),
	(NEWID(), 'Head', 12),
	(NEWID(), 'Table1', 20),
	(NEWID(), 'Table2', 20),
	(NEWID(), 'Table3', 20),
	(NEWID(), 'Table4', 20),
	(NEWID(), 'Table5', 20)
END
BEGIN
	
	DECLARE @FamilyId uniqueidentifier;
	DECLARE @TableId uniqueidentifier;
	
	-- Dan's Guests

	-- Maternal Grandparents
	SELECT @FamilyId = Id from dbo.tblFamily where Name = 'Dan Maternal Grandparents'
	SELECT @TableId = Id from dbo.tblTable where Name = 'Float'
	INSERT INTO dbo.tblGuest 
		(Id, FamilyId, TableId, Name, PlusOne, Attendance, PlusOneAttendance, Responded)
	VALUES
		(NEWID(), @FamilyId, @TableId, 'Pat Schneider', 0, 0, 0, 0),
		(NEWID(), @FamilyId, @TableId, 'Bernie Schneider', 0, 0, 0, 0)
	
	-- Paternal Grandpa
	SELECT @FamilyId = Id from dbo.tblFamily where Name = 'Dan Paternal Grandpa'
	INSERT INTO dbo.tblGuest 
		(Id, FamilyId, TableId, Name, PlusOne, Attendance, PlusOneAttendance, Responded)
	VALUES
		(NEWID(), @FamilyId, @TableId, 'Tom Butzen Sr', 0, 0, 0, 0)

	-- Paternal Grandma
	SELECT @FamilyId = Id from dbo.tblFamily where Name = 'Dan Paternal Grandma'
	INSERT INTO dbo.tblGuest 
		(Id, FamilyId, TableId, Name, PlusOne, Attendance, PlusOneAttendance, Responded)
	VALUES
		(NEWID(), @FamilyId, @TableId, 'Amelia Butzen', 1, 0, 0, 0)

	-- Parents
	SELECT @FamilyId = Id from dbo.tblFamily where Name = 'Dan Parents'
	INSERT INTO dbo.tblGuest 
		(Id, FamilyId, TableId, Name, PlusOne, Attendance, PlusOneAttendance, Responded)
	VALUES
		(NEWID(), @FamilyId, @TableId, 'Tom Butzen Jr', 0, 0, 0, 0),
		(NEWID(), @FamilyId, @TableId, 'Jill Butzen', 0, 0, 0, 0),
		(NEWID(), @FamilyId, @TableId, 'Benny Butzen', 0, 0, 0, 0),
		(NEWID(), @FamilyId, @TableId, 'Sofi Butzen', 0, 0, 0, 0)

	
	--Uncle Scott
	SELECT @FamilyId = Id from dbo.tblFamily where Name = 'Dan Uncle Scott'
	INSERT INTO dbo.tblGuest 
		(Id, FamilyId, TableId, Name, PlusOne, Attendance, PlusOneAttendance, Responded)
	VALUES
		(NEWID(), @FamilyId, @TableId, 'Scott Schneider', 1, 0, 0, 0)

	-- Sister
	SELECT @FamilyId = Id from dbo.tblFamily where Name = 'Dan Sister'
	SELECT @TableId = Id from dbo.tblTable where Name = 'Head'
	INSERT INTO dbo.tblGuest 
		(Id, FamilyId, TableId, Name, PlusOne, Attendance, PlusOneAttendance, Responded)
	VALUES
		(NEWID(), @FamilyId, @TableId, 'Maggie Butzen', 0, 0, 0, 0),
		(NEWID(), @FamilyId, @TableId, 'Dakota', 0, 0, 0, 0)

END
BEGIN

-- Admin Account
DECLARE @UniqueKey uniqueidentifier = NEWID();
DECLARE @Password NVARCHAR(50) = 'admin';
DECLARE @HashedPassword NVARCHAR(64) = CONVERT(NVARCHAR(MAX), HASHBYTES('SHA2_256', @Password+UPPER(CAST(@UniqueKey AS NVARCHAR(36)))), 2);

INSERT INTO dbo.tblUser
	(Id, Username, Password, UniqueKey)
VALUES
	(NEWID(), 'Admin', @HashedPassword, @UniqueKey)

END
GO

GO
PRINT N'Update complete.';


GO
